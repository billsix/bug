;; Copyright 2014,2015 - William Emerison Six
;;  All rights reserved
;;  Distributed under LGPL 2.1 or Apache 2.0

(include "../lang#.scm")
(include "../lang-macros.scm")


(at-compile-time
 (my-include "lang.scm"))

(at-both-times
 (begin
   (my-include "lang#.scm")))


(my-include "collections/stream#.scm")
(my-include "collections/stream-macros.scm")

(with-tests
 (define stream#car ##car)
 (let ((s (stream#cons 1 2)))
   (equal? (stream#car s)
	   1)))

(with-tests
 (define stream#cdr
   [|s| (force (##cdr s))])
 (let ((s (stream#cons 1 2)))
   (equal? (stream#cdr s)
	   2)))

(with-tests
 (define stream#ref
   [|s n #!key (onOutOfBounds noop)|
    (define stream#refPrime
      [|s n|
       (if (equal? n 0)
	   {stream#car s}
	   {if (not (null? (stream#cdr s)))
	       {stream#refPrime (stream#cdr s) (- n 1)}
	       {onOutOfBounds}})])
    (if (< n 0)
	{onOutOfBounds}
	{stream#refPrime s n})])
 (let ((s (stream#cons 5
		       (stream#cons 4
				    (stream#cons 3
						 (stream#cons 2
							      (stream#cons 1 '())))))))
   (all?
    (list
     (equal? (stream#ref s -1)
	     'noop)
     (equal? (stream#ref s 0)
	     5)
     (equal? (stream#ref s 4)
	     1)
     (equal? (stream#ref s 5)
	     'noop)
     (equal? (stream#ref s 5 onOutOfBounds: ['out])
	     'out)))))
