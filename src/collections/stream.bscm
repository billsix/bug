;; Copyright 2014,2015 - William Emerison Six
;;  All rights reserved
;;  Distributed under LGPL 2.1 or Apache 2.0

(##include "../lang#.scm")
(##include "../lang-macros.scm")


(at-compile-time
 (my-include "lang.scm"))

(at-both-times
 (my-include "lang#.scm"))

(my-include "collections/stream#.scm")
(my-include "collections/stream-macros.scm")

(with-tests
 (##define car ##car)
 (##let ((s (cons 1 2)))
   (##equal? (car s)
	     1)))

(with-tests
 (##define cdr
   [|s| (##force (##cdr s))])
 (##let ((s (cons 1 2)))
   (##equal? (cdr s)
	     2)))

(with-tests
 (##define ref
   [|s n #!key (onOutOfBounds noop)|
    (##define refPrime
      [|s n|
       (if (##equal? n 0)
	   {car s}
	   {if (##not (##null? (cdr s)))
	       {refPrime (cdr s) (- n 1)}
	       {onOutOfBounds}})])
    (if (< n 0)
	{onOutOfBounds}
	{refPrime s n})])
 (##let ((s (cons 5 (cons 4 (cons 3 (cons 2 (cons 1 '())))))))
   (all?
    (##list
     (##equal? (ref s -1)
     	       'noop)
     (##equal? (ref s 0)
	       5)
     (##equal? (ref s 4)
     	       1)
     (##equal? (ref s 5)
     	       'noop)
     (##equal? (ref s 5 onOutOfBounds: ['out])
     	       'out)))))
