;; Copyright 2014,2015 - William Emerison Six
;;  All rights reserved
;;  Distributed under LGPL 2.1 or Apache 2.0


{include "lang#.scm"}
{include "lang-macros.scm"}


;; identity
;;   identity :: a -> a
;;
;;   Return the input
{with-test
 {define identity [|x| x]}
 (equal? "foo" (identity "foo"))}

;; identity
;;   identity :: () -> Symbol
;;
;;   Return the symbol 'noop. Useful when
;;   a procedure expects a procedure as an
;;   argument, but the caller has no need
;;   for worthwhile procedure to actually be
;;   called

{with-test
 {define noop  ['noop]}
 (equal? (noop) 'noop)}


;; all?

(at-both-times
 {define all?
   [|lst|
    {cond ((null? lst) #t)
           ((not (car lst)) #f)
           (else (all? (cdr lst)))}]})


;; satisfies-relation
;;   satisfies-relation :: (a -> b) -> [(a,b)] -> Bool
;;
;;   For a given relation (i.e. function), and a
;;   list of 2-element lists, evaluatie whether the function
;;   when applied to the first element of the list
;;   evaluates to the second element of the list
;;
;;   Reference: http://en.wikipedia.org/wiki/Binary_relation
{with-tests
 {define satisfies-relation
   [|fn list-of-pairs|
    ;;   satisfies-relation-prime :: (a -> b) -> (a,b) -> Bool
    {define satisfies-relation-prime
      [|fn pair|
       {let ((independent-variable (car pair))
	     (dependent-variable (cadr pair)))
	 (equal? (fn independent-variable)
		 dependent-variable)}]}
    (all? (map [|pair| (satisfies-relation-prime fn pair)]
	       list-of-pairs))]}
 (satisfies-relation [|x| (+ x 1)]
		     `((0 1)
		       (1 2)
		       (2 3)))}


;; numeric-if
;;   numeric-if :: (Num a) =>  a -> Thunk -> Thunk -> Thunk
;;
;;   An if expression for numbers, based on their sign.
{with-test
 {define numeric-if
   [|expr #!key (ifPositive noop) (ifZero noop)(ifNegative noop)|
    {cond ((> expr 0) (ifPositive))
	  ((= expr 0) (ifZero))
	  (else (ifNegative))}]}
 (satisfies-relation
  [|n|
   (numeric-if n
	       ifPositive: ['pos]
	       ifZero: ['zero]
	       ifNegative: ['neg])]
  `((5 pos)
    (0 zero)
    (-5 neg)))}


;; complement
;;   complement :: (a -> Bool) -> (a -> Bool)
;;
;;   Negates a predicate
{with-test
 {define complement
   [|f|
    [|#!rest args| (not (apply f args))]]}
 (satisfies-relation
  [|x| ((complement pair?) x)]
  `(
    (1 #t)
    ((1 2) #f)))}


;; while
;;   while :: Thunk -> Thunk -> Symbol
;;
;;   Imperative while loop.
{with-tests
 {define while
   [|pred body|
    (if (pred)
	[(body)
	 (while pred body)]
	[(noop)])]}
 {let ((a 0))
   {begin
     (while [(< a 5)]
	    [(set! a (+ a 1))])
     (equal? a 5)}}}


{include "list#.scm"}

;; copy
;;   copy :: [a] -> [a]
;;   Creates a copy of the list data structure, but does
{with-tests
 {define copy
   [|l| (map identity l)]}
 (satisfies-relation
  copy
  `(
    ((1 2 3 4 5) (1 2 3 4 5))))}


;; proper?
;;   proper? :: [a] -> Bool
;;   Tests that the argument is a list that is properly
;;   termitated.
{with-tests
 {define proper?
   [|l| {cond ((null? l) #t)
	      ((pair? l) (proper? (cdr l)))
	      (else #f)}]}
 (satisfies-relation
  proper?
  `((4 #f)
    ((1 2) #t)
    ((1 2 . 5) #f)))}



;; reverse!
;;   reverse! :: [a] -> [a]
;;   reverses the list, possibly destructively.
{with-tests
 {define reverse!
   [|lst|
    {define reversePrime! ;; reversePrime assumes that lst is not null
      [|lst prev|
       {cond ((null? (cdr lst))
		(set-cdr! lst prev)
		lst)
	       (else
		(let ((rest (cdr lst)))
		  (set-cdr! lst prev)
		  (reversePrime! rest lst)))}]}
    ;; ensure that reversePrime's constraints are preserved
    (if (null? lst)
	['()]
	[(reversePrime! lst '())])]}
 (satisfies-relation
  reverse!
  `(
    (() ())
    ((1 2 3 4 5 6) (6 5 4 3 2 1))))}

;; first :: [a] -> Optional (() -> b) -> Either a b
;;   first returns the first element of the list, 'noop if the list is empty and no
;;   thunk is passed
{with-tests
 {define first
   [|lst #!key (onNull noop)|
    (if (null? lst)
	[(onNull)]
	[(car lst)])]}
 ;; test without the onNull handler
 (satisfies-relation
  first
  `(
    (() noop)
    ((1 2 3) 1)
    ((2 3 1 1 1) 2)))
 ;; test the onNull handler
 (satisfies-relation
  [|l| (first l onNull: [5])]
  `(
    (() 5)
    ((1 2 3) 1)))}

;; but-first :: [a] -> Optional (() -> b) -> Either [a] b
;;   but-first returns all of the elements of the list, except for the first
{with-tests
 {define but-first
   [|lst #!key (onNull noop)|
    (if (null? lst)
	[(onNull)]
	[(cdr lst)])]}
 (satisfies-relation
  but-first
  `(
    (() noop)
    ((1 2 3) (2 3))))
 (satisfies-relation
  [|l| (but-first l onNull: [5])]
  `(
    (() 5)))}

;;  last :: [a] -> Optional (() -> b) -> Either a b
;;    last returns the last element of the list
{with-tests
 {define last
   [|lst #!key (onNull noop)|
    {define last-Prime
      [|lst|
       (if (null? (cdr lst))
	   [(car lst)]
	   [(last (cdr lst))])]}
    (if (null? lst)
	[(onNull)]
	[(last-Prime lst)])]}
 (satisfies-relation
  last
  `(
    (() noop)
    ((1) 1)
    ((1 2) 2)))
 (satisfies-relation
  [|l| (last l onNull: [5])]
  `(
    (() 5)
    ((1) 1)))}

;;  but-last :: [a] -> Optional (() -> b) -> Either [a] b
;;    but-last returns all but the last element of the list
{with-tests
 {define but-last
   [|lst #!key (onNull noop)|
    {define but-last-prime
      [|lst|
       (reverse!
	(but-first
	 (reverse! lst)))]}
    (if (null? lst)
	[(onNull)]
	[(but-last-prime lst)])]}
 (satisfies-relation
  but-last
  `(
    (() noop)
    ((1) ())
    ((1 2) (1))
    ((1 2 3) (1 2))))
 (satisfies-relation
  [|l| (but-last l onNull: [5])]
  `(
    (() 5)
    ((1) ())))}
 
;; filter
;;   filter :: (a -> Bool) -> [a] -> [a]
;;   return a new list, consisting only the elements where the predicate p?
;;   returns true
{with-tests
 {define filter
   [|p? lst|
    {define filterPrime
      [|lst acc|
       (if (null? lst)
	   [acc]
	   [{let ((head (car lst)))
	     (filterPrime (cdr lst)
			  (if (p? head)
			      [(cons head acc)]
			      [acc]))}])]}
    (reverse! (filterPrime lst '()))]}
 (satisfies-relation
  [|l| (filter [|x| (not (= 4 (expt x 2)))]
	       l)]
  `(
    ((1 2 3 4 5 -2) (1 3 4 5))))}

;; remove
;;   remove :: a -> [a] -> [a]
;;   returns a new list with all occurances of x removed
{with-tests
 {define remove
   [|x lst|
    (filter [|y| (not (equal? x y))]
	    lst)]}
 (satisfies-relation
  [|l| (remove 5 l)]
  `(
    ((1 5 2 5 3 5 4 5 5) (1 2 3 4))))}


;; fold-left
;;    fold-left :: (a -> b -> a) -> a -> [b] -> a
;;    reduce the list to a scalar by applying the reducing function repeatedly,
;;    starting from the "left" side of the list
{with-tests
 {define fold-left
   [|fn initial lst|
    {define fold-leftPrime
      [|acc lst|
       (if (null? lst)
	   [acc]
	   [(fold-leftPrime (fn acc
			       (car lst))
			   (cdr lst))])]}
    (fold-leftPrime initial lst]]}
 (satisfies-relation
  [|l| (fold-left + 0 l)]
  `(
    (() 0)
    ((1) 1)
    ((1 2) 3)
    ((1 2 3 4 5 6) 21)))}

;; scan-left :: (a -> b -> a) -> a -> [b] -> [a]
;;   scan-left is like fold-left, but every intermediate value
;;   of fold-left's acculumalotr is put onto a list, which
;;   is the value of scan-left
{with-tests
 {define scan-left
   [|fn initial lst|
    {define scan-leftPrime
      [|acc-list lst|
       (if (null? lst)
	   [(reverse! acc-list)]
	   [{let ((newacc (fn (first acc-list)
			       (car lst))))
	     (scan-leftPrime (cons newacc acc-list)
			     (cdr lst))}])]}
    (scan-leftPrime (list initial) lst)]}
 (satisfies-relation
  [|l| (scan-left + 0 l)]
  `(
    (() (0))
    ((1 1 1 2 20 30) (0 1 2 3 5 25 55))))}



;; fold-right
;;    fold-right :: (b -> a -> a) -> a -> [b] -> a
;;    reduce the list to a scalar by applying the reducing function repeatedly,
;;    starting from the "right" side of the list
{with-tests
 {define fold-right
   [|fn initial lst|
    {define fold-rightPrime
      [|acc lst|
       (if (null? lst)
	   [acc]
	   [(fn (car lst)
	       (fold-rightPrime acc (cdr lst)))])]}
    (fold-rightPrime initial lst)]}
 (satisfies-relation
  [|l| (fold-right - 0 l)]
  `(
    (() 0)
    ((1 2 3 4) -2)
    ((2 2 5 4) 1)))}

;; flatmap
;;   flatmap :: (a -> [b]) -> [a] -> [b]
{with-tests
 {define flatmap
   [|fn lst|
    (fold-left append '() (map fn lst))]}
 (satisfies-relation
  [|l| (flatmap [|x| (list x x x)]
		l)]
  `(
    ((1) (1 1 1))
    ((1 2) (1 1 1 2 2 2))
    ((1 2 3) (1 1 1 2 2 2 3 3 3))))
 (satisfies-relation
   [|l| (flatmap [|x| (list x
			    (+ x 1)
			    (+ x 2))]
		 l)]
   `(
     ((10 20) (10 11 12 20 21 22))))}

;; enumerate-interval
;;   enumerate-interval :: (Num a) => a -> a -> Optional a -> a
{with-tests
 {define enumerate-interval
   [|low high #!key (step 1)|
    (if (> low high)
	['()]
	[(cons low (enumerate-interval (+ low step) high step: step))])]}
 (equal? (enumerate-interval 1 10)
	   '(1 2 3 4 5 6 7 8 9 10))
 (equal? (enumerate-interval 1 10 step: 2)
	   '(1 3 5 7 9))}

;; iota - from common lisp
;;   iota :: (Num a) => a -> Optional a -> Optional a -> a
{with-tests
 {define iota
   [|n #!key (start 0) (step 1)|
    (enumerate-interval start n step: step)]}
 (equal? (iota 5 start: 0)
	   '(0 1 2 3 4 5))
 (equal? (iota 5 start: 2 step: (/ 3 2))
	   '(2 7/2 5))}


;; permutations
;;   permutations :: [a] -> [[a]]
;;   returns all permutations of the list
{with-tests
 {define permutations
   [|lst|
    {define permutationsPrime
      [|lst|
       (if (null? lst)
	   [(list '())]
	   [(flatmap [|x|
		     (map [|y| (cons x y)]
			    (permutationsPrime (remove x lst)))]
		    lst)])]}
    (if (null? lst)
	['()]
	[(permutationsPrime lst)])]}
 (satisfies-relation
  permutations
  `(
    (() ())
    ((1) ((1)))
    ((1 2) ((1 2)
	    (2 1)))
    ((1 2 3) ((1 2 3)
	      (1 3 2)
	      (2 1 3)
	      (2 3 1)
	      (3 1 2)
	      (3 2 1)))))}

;; sublists
;;   sublists :: [a] -> [[a]]
;;   Returns a list of every sub-list
{with-tests
 {define sublists
   [|lst|
    (if (null? lst)
	['()]
	[(cons lst (sublists (cdr lst)))])]}
 (satisfies-relation
  sublists
  `(
    (() ())
    ((1) ((1)))
    ((1 2) ((1 2) (2)))
    ((1 2 3) ((1 2 3) (2 3) (3)))))}


{with-tests
 {define compose
   [|#!rest fns|
    [|#!rest args|
     {define compose-prime
       [|list-of-fns accum|
	(fold-left [|acc fn| (fn acc)] accum list-of-fns)]}
     {let ((reversed-fns (reverse! fns)))
       (if (null? fns)
	   [(apply identity args)]
	   [(compose-prime (cdr reversed-fns) (apply (car reversed-fns) args))])}]]}
 (equal? ((compose) 5)
	 5)
 (equal? ((compose [|x| (* x 2)])
	  5)
	 10)
 (equal? ((compose [|x| (+ x 1)]
		   [|x| (* x 2)])
	  5)
	 11)
 (equal? ((compose [|x| (/ x 13)]
		   [|x| (+ x 1)]
		   [|x| (* x 2)])
	  5)
	 11/13)}


{include "stream#.scm"}
{include "stream-macros.scm"}
{namespace (""
	    car
	    cdr)}

{with-tests
 {define stream#car car}
 {let ((s (stream#cons 1 2)))
   (equal? (stream#car s)
	   1)}}

{with-tests
 {define stream#cdr
   [|s| (force (cdr s))]}
 {let ((s (stream#cons 1 2)))
   (equal? (stream#cdr s)
	   2)}}

{with-tests
 {define stream#ref
   [|s n #!key (onOutOfBounds noop)|
    {define stream#refPrime
      [|s n|
       (if (equal? n 0)
	   [(stream#car s)]
	   [(if (not (null? (stream#cdr s)))
	       [(stream#refPrime (stream#cdr s) (- n 1))]
	       [(onOutOfBounds)])])]}
    (if (< n 0)
	[(onOutOfBounds)]
	[(stream#refPrime s n)])]}
 {let ((s (stream#cons 5
		       (stream#cons 4
				    (stream#cons 3
						 (stream#cons 2
							      (stream#cons 1 '())))))))
   (all?
    (list
     (equal? (stream#ref s -1)
	     'noop)
     (equal? (stream#ref s 0)
	     5)
     (equal? (stream#ref s 4)
	     1)
     (equal? (stream#ref s 5)
	     'noop)
     (equal? (stream#ref s 5 onOutOfBounds: ['out])
	     'out)))}}
