#!/usr/bin/env gsi-script

;; example usage 
;;  ./bug-gscpp foo.scm  aoeu.scm
;;  foo.scm is the input file, aoeu.scm is the outputfile


;; read a file into a list of bytes
(define (list-of-bytes-from-file f)
  (with-input-from-file f
    (lambda ()
      (let loop ((chars '()))
	(let ((c (read-char (current-input-port))))
	  (if (equal? c #!eof)
	      chars
	      (loop (append chars (list c)))))))))


;; standard fold-left
(define (fold-left fn initial lst)
  (define (fold-leftPrime acc lst)
    (if (null? lst)
	acc
	(fold-leftPrime (fn acc
			    (car lst))
			(cdr lst))))
  (fold-leftPrime initial lst))

;; replaces [,],|,{,} with real Scheme constructs
(define (create-lambdas listOfChars)
  ;; handle anything that follows "["
  (define (handle-open-bracket listOfChars)
    ;; handle everything after the first "|" until the closing "|"
    (define (handle-close-pipe listOfChars)
      (cond ((null? listOfChars)
	     '())
	    ((equal? #\| (car listOfChars))
	     (cons #\)
		   (create-lambdas (cdr listOfChars))))
	    (else
	     (cons (car listOfChars)
		   (handle-close-pipe (cdr listOfChars))))))
    (let ((rest (cdr listOfChars)))
      (if (and (not (null? rest))
	       (equal? #\| (car rest)))
	  (append (string->list "(lambda (")
		  (handle-close-pipe (cddr listOfChars)))
	  (append (string->list "(lambda () ")
		  (create-lambdas (cdr listOfChars))))))
  (define (handle-close-bracket listOfChars)
    (cons #\)
	  (create-lambdas (cdr listOfChars))))
  (define (handle-open-curly-bracket listOfChars)
    (create-lambdas (append (string->list "[(")
			    (cdr listOfChars))))
  (define (handle-close-curly-bracket listOfChars)
    (create-lambdas (append (string->list ")]")
			    (cdr listOfChars))))
  (if (null? listOfChars)
      '()
      (let ((first-char (car listOfChars)))
	(cond
	 ((equal? #\[ first-char)
	  (handle-open-bracket listOfChars))
	 ((equal? #\{ first-char)
	  (handle-open-curly-bracket listOfChars))
	 ((equal? #\} first-char)
	  (handle-close-curly-bracket listOfChars))
	 ((equal? #\] first-char)
	  (handle-close-bracket listOfChars))
	 (else (cons first-char (create-lambdas (cdr listOfChars))))))))


(define (list-of-bytes-to-file f s)
  (with-output-to-file f
    (lambda ()
      (display s))))

(let ((input-characters
       (fold-left (lambda (acc x) (append acc (list x)))
		  '()
		  (list-of-bytes-from-file (cadr (command-line)))))
      (output-file (caddr (command-line))))
  (list-of-bytes-to-file output-file
			 (list->string (create-lambdas input-characters))))
